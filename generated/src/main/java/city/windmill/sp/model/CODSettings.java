/*
 * Selling Partner API for Fulfillment Outbound
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package city.windmill.sp.model;

import java.util.Objects;
import java.util.Arrays;
import city.windmill.sp.model.Currency;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * The COD (Cash On Delivery) charges that you associate with a COD fulfillment order.
 */
@ApiModel(description = "The COD (Cash On Delivery) charges that you associate with a COD fulfillment order.")




public class CODSettings {
  @SerializedName("IsCODRequired")
  private Boolean isCODRequired = null;

  @SerializedName("CODCharge")
  private Currency coDCharge = null;

  @SerializedName("CODChargeTax")
  private Currency coDChargeTax = null;

  @SerializedName("ShippingCharge")
  private Currency shippingCharge = null;

  @SerializedName("ShippingChargeTax")
  private Currency shippingChargeTax = null;

  public CODSettings isCODRequired(Boolean isCODRequired) {
    this.isCODRequired = isCODRequired;
    return this;
  }

   /**
   * Indicates whether this fulfillment order requires COD (Cash On Delivery) payment.
   * @return isCODRequired
  **/
  @ApiModelProperty(required = true, value = "Indicates whether this fulfillment order requires COD (Cash On Delivery) payment.")
  public Boolean isIsCODRequired() {
    return isCODRequired;
  }

  public void setIsCODRequired(Boolean isCODRequired) {
    this.isCODRequired = isCODRequired;
  }

  public CODSettings coDCharge(Currency coDCharge) {
    this.coDCharge = coDCharge;
    return this;
  }

   /**
   * The amount of the COD charge to be collected from the recipient for a COD order.
   * @return coDCharge
  **/
  @ApiModelProperty(value = "The amount of the COD charge to be collected from the recipient for a COD order.")
  public Currency getCoDCharge() {
    return coDCharge;
  }

  public void setCoDCharge(Currency coDCharge) {
    this.coDCharge = coDCharge;
  }

  public CODSettings coDChargeTax(Currency coDChargeTax) {
    this.coDChargeTax = coDChargeTax;
    return this;
  }

   /**
   * The amount of the tax on the COD charge to be collected from the recipient for a COD order.
   * @return coDChargeTax
  **/
  @ApiModelProperty(value = "The amount of the tax on the COD charge to be collected from the recipient for a COD order.")
  public Currency getCoDChargeTax() {
    return coDChargeTax;
  }

  public void setCoDChargeTax(Currency coDChargeTax) {
    this.coDChargeTax = coDChargeTax;
  }

  public CODSettings shippingCharge(Currency shippingCharge) {
    this.shippingCharge = shippingCharge;
    return this;
  }

   /**
   * The amount of the tax on the COD charge to be collected from the recipient for a COD order.
   * @return shippingCharge
  **/
  @ApiModelProperty(value = "The amount of the tax on the COD charge to be collected from the recipient for a COD order.")
  public Currency getShippingCharge() {
    return shippingCharge;
  }

  public void setShippingCharge(Currency shippingCharge) {
    this.shippingCharge = shippingCharge;
  }

  public CODSettings shippingChargeTax(Currency shippingChargeTax) {
    this.shippingChargeTax = shippingChargeTax;
    return this;
  }

   /**
   * The amount of the tax on the shipping charge to be collected from the recipient for a COD order.
   * @return shippingChargeTax
  **/
  @ApiModelProperty(value = "The amount of the tax on the shipping charge to be collected from the recipient for a COD order.")
  public Currency getShippingChargeTax() {
    return shippingChargeTax;
  }

  public void setShippingChargeTax(Currency shippingChargeTax) {
    this.shippingChargeTax = shippingChargeTax;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CODSettings coDSettings = (CODSettings) o;
    return Objects.equals(this.isCODRequired, coDSettings.isCODRequired) &&
        Objects.equals(this.coDCharge, coDSettings.coDCharge) &&
        Objects.equals(this.coDChargeTax, coDSettings.coDChargeTax) &&
        Objects.equals(this.shippingCharge, coDSettings.shippingCharge) &&
        Objects.equals(this.shippingChargeTax, coDSettings.shippingChargeTax);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isCODRequired, coDCharge, coDChargeTax, shippingCharge, shippingChargeTax);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CODSettings {\n");
    
    sb.append("    isCODRequired: ").append(toIndentedString(isCODRequired)).append("\n");
    sb.append("    coDCharge: ").append(toIndentedString(coDCharge)).append("\n");
    sb.append("    coDChargeTax: ").append(toIndentedString(coDChargeTax)).append("\n");
    sb.append("    shippingCharge: ").append(toIndentedString(shippingCharge)).append("\n");
    sb.append("    shippingChargeTax: ").append(toIndentedString(shippingChargeTax)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

